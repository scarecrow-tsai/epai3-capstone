{"version":3,"sources":["app/hooks.ts","features/landing/landingSlice.ts","features/home/Home.tsx","features/landing/Landing.tsx","App.tsx","app/store.ts","serviceWorker.ts","styles/GlobalStyles.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","landingSlice","createSlice","name","initialState","value","reducers","login","state","logout","actions","selectLanding","landing","LandingButton","styled","button","Home","history","useHistory","dispatch","useState","message","setMessage","useEffect","axios","get","baseURL","then","response","data","catch","error","console","log","onClick","push","Landing","landingStatus","ProtectedRoute","authStatus","routeProps","to","App","exact","path","store","configureStore","reducer","landingReducer","Boolean","window","location","hostname","match","CustomStyles","createGlobalStyle","GlobalStyles","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wNAIaA,EAAiB,kBAAMC,eACvBC,EAAkDC,I,QCMlDC,EAAeC,YAAY,CACtCC,KAAM,UACNC,aANiC,CACjCC,MAAO,cAMPC,SAAU,CACRC,MAAO,SAAAC,GACLA,EAAMH,MAAQ,aAEhBI,OAAQ,SAAAD,GACNA,EAAMH,MAAQ,iBAKb,EAA0BJ,EAAaS,QAA/BH,EAAR,EAAQA,MAAOE,EAAf,EAAeA,OAETE,EAAgB,SAACH,GAAD,OAAsBA,EAAMI,QAAQP,OAElDJ,IAAf,Q,OCjBMY,EAAgBC,IAAOC,OAAV,0EAAGD,CAAgB,8FAkCvBE,EAhCQ,WACrB,IAAIC,EAAUC,cACRC,EAAWtB,IACjB,EAA8BuB,mBAAiB,SAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,IACGC,IAAIC,mCACJC,MAAK,SAAAC,GACJN,EAAWM,EAASC,KAAKR,YAE1BS,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEf,IAOH,OACE,0BACE,4BACE,0CACA,4BAAIV,IACJ,cAACR,EAAD,CAAeqB,QAVF,WACjBf,EAASV,KACTQ,EAAQkB,KAAK,MAQT,2B,ihBChCFtB,EAAgBC,IAAOC,OAAV,6EAAGD,CAAgB,8FAgCvBsB,EA9BW,WACxB,IAAInB,EAAUC,cACRC,EAAWtB,IACXwC,EAAgBtC,EAAeY,GAYrC,OACE,0BACE,4BACE,yCACA,gDACmB,cAAlB0B,EACC,cAAC,EAAD,CAAeH,QAXJ,WACjBf,EAASV,KACTQ,EAAQkB,KAAK,MASP,qBAEA,cAAC,EAAD,CAAeD,QAlBL,WAChBf,EAASZ,KACTU,EAAQkB,KAAK,UAgBP,0B,grBCdJG,EAAiB,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,WAAeC,EAAsC,iBAC7E,MAAmB,cAAfD,EACK,cAAC,IAAD,eAAWC,IAEX,cAAC,IAAD,CAAUC,GAAG,OAuBTC,EAnBO,WACpB,IAAML,EAAgBtC,EAAeY,GAErC,OACE,8BACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,EAAD,CAAgBL,WAAYF,EAAeO,KAAK,QAAhD,SACE,cAAC,EAAD,cClCCC,EAAQC,YAAe,CAClCC,QAAS,CACPnC,QAASoC,KCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,w9KCdAC,EAAeC,YAAH,0FAEiB,UAC3B,qEAWOC,EAPM,kBACnB,qCACE,oBACA,cAACF,EAAD,QCNJG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUd,MAAOA,EAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SAGJe,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAACsC,GACLA,EAAaC,gBAEdpC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAMV,c","file":"static/js/main.5ea25a06.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RootState } from \"../../app/store\"\nimport { createSlice } from \"@reduxjs/toolkit\"\n\nexport interface LandingState {\n  value: string\n}\n\nconst initialState: LandingState = {\n  value: \"logged-out\",\n}\n\nexport const landingSlice = createSlice({\n  name: \"landing\",\n  initialState,\n  reducers: {\n    login: state => {\n      state.value = \"logged-in\"\n    },\n    logout: state => {\n      state.value = \"logged-out\"\n    },\n  },\n})\n\nexport const { login, logout } = landingSlice.actions\n\nexport const selectLanding = (state: RootState) => state.landing.value\n\nexport default landingSlice.reducer","import axios from \"axios\"\nimport React, { useState, useEffect } from \"react\"\nimport tw, { styled } from \"twin.macro\"\n\nimport { useHistory } from \"react-router-dom\"\nimport { useAppDispatch } from \"../../app/hooks\"\nimport { logout } from \"./../landing/landingSlice\"\n\nconst baseURL =\n  process.env.REACT_APP_BACKEND_URL || \"https://openform.herokuapp.com\"\n\nconst LandingButton = styled.button(tw`border rounded font-semibold p-2 m-2`)\n\nconst Home: React.FC = () => {\n  let history = useHistory()\n  const dispatch = useAppDispatch()\n  const [message, setMessage] = useState<string>(\"empty\")\n\n  useEffect(() => {\n    axios\n      .get(baseURL + \"/api/hello\")\n      .then(response => {\n        setMessage(response.data.message)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }, [])\n\n  const funcLogOut = () => {\n    dispatch(logout())\n    history.push(\"/\")\n  }\n\n  return (\n    <div tw=\"flex flex-col items-center justify-around h-screen w-full\">\n      <div tw=\"flex flex-col items-center justify-around\">\n        <h1 tw=\"text-4xl\"> Home Page </h1>\n        <p>{message}</p>\n        <LandingButton onClick={funcLogOut}>log out</LandingButton>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React from \"react\"\nimport tw, { styled } from \"twin.macro\"\n\nimport { useHistory } from \"react-router-dom\"\nimport { login, logout, selectLanding } from \"./landingSlice\"\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\"\n\nconst LandingButton = styled.button(tw`border rounded font-semibold p-2 m-2`)\n\nconst Landing: React.FC = () => {\n  let history = useHistory()\n  const dispatch = useAppDispatch()\n  const landingStatus = useAppSelector(selectLanding)\n\n  const funcLogIn = () => {\n    dispatch(login())\n    history.push(\"/home\")\n  }\n\n  const funcLogOut = () => {\n    dispatch(logout())\n    history.push(\"/\")\n  }\n\n  return (\n    <div tw=\"flex flex-col items-center justify-around h-screen w-full\">\n      <div tw=\"flex flex-col items-center justify-around\">\n        <h1 tw=\"text-4xl\"> openform </h1>\n        <h2 tw=\"text-base\"> By Akshaj Verma </h2>\n        {landingStatus === \"logged-in\" ? (\n          <LandingButton onClick={funcLogOut}>log out</LandingButton>\n        ) : (\n          <LandingButton onClick={funcLogIn}>log in</LandingButton>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Landing\n","import React from \"react\"\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  RouteProps,\n  Redirect,\n} from \"react-router-dom\"\n\nimport Home from \"./features/home/Home\"\nimport { useAppSelector } from \"./app/hooks\"\nimport Landing from \"./features/landing/Landing\"\nimport { selectLanding } from \"./features/landing/landingSlice\"\n\ntype ProtectedRouteProps = {\n  authStatus: string\n} & RouteProps\n\nconst ProtectedRoute = ({ authStatus, ...routeProps }: ProtectedRouteProps) => {\n  if (authStatus === \"logged-in\") {\n    return <Route {...routeProps} />\n  } else {\n    return <Redirect to=\"/\" />\n  }\n}\n\nconst App: React.FC = () => {\n  const landingStatus = useAppSelector(selectLanding)\n\n  return (\n    <div>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <Landing />\n          </Route>\n          <ProtectedRoute authStatus={landingStatus} path=\"/home\">\n            <Home />\n          </ProtectedRoute>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport landingReducer from '../features/landing/landingSlice';\n\nexport const store = configureStore({\n  reducer: {\n    landing: landingReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { createGlobalStyle } from 'styled-components'\nimport tw, { theme, GlobalStyles as BaseStyles } from 'twin.macro'\n\nconst CustomStyles = createGlobalStyle`\n  body {\n    -webkit-tap-highlight-color: ${theme`colors.purple.500`};\n    ${tw`antialiased`}\n  }\n`\n\nconst GlobalStyles = () => (\n  <>\n    <BaseStyles />\n    <CustomStyles />\n  </>\n)\n\nexport default GlobalStyles\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport { store } from \"./app/store\"\nimport { Provider } from \"react-redux\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport GlobalStyles from \"./styles/GlobalStyles\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyles />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}